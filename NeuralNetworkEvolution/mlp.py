# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_MLP.ipynb.

# %% auto 0
__all__ = ['mlp_plot']

# %% ../nbs/03_MLP.ipynb 3
import jax
import jax.numpy as jnp
import numpy as np
import equinox as eqx
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
from matplotlib.cm import ScalarMappable
import matplotlib.style as mplstyle
import seaborn as sns

from .neuron import Neuron
from .activations import identity
from .config import MLPConfig

# %% ../nbs/03_MLP.ipynb 7
def mlp_plot(G, neuron_labels, neuron_importances):
    """ 
    Visualizes the MLP as a directed graph using the networkx library.
    The nodes are colored based on their importance values and the edges are weighted based on their weights.
    """
    pos = nx.multipartite_layout(G)
    plt.figure(figsize=(12, 8))

    # Normalize the importance values and map them to colors
    norm = Normalize(vmin=min(neuron_importances), vmax=max(neuron_importances))
    cmap = plt.cm.viridis
    edge_colors = [cmap(norm(imp)) for imp in neuron_importances]

    # Draw nodes with white fill and colored edges
    nx.draw_networkx_nodes(G, pos, node_size=5000, node_color="white", edgecolors=edge_colors, linewidths=2)
    nx.draw_networkx_labels(G, pos, labels=neuron_labels, font_size=10, font_color="black", font_weight="bold")

    # Determine edge widths based on weight magnitudes
    edge_weights = nx.get_edge_attributes(G, 'weight')
    edge_widths = [abs(weight) for weight in edge_weights.values()]

    # Draw edges with widths proportional to their weights
    nx.draw_networkx_edges(G, pos, edge_color="black", width=edge_widths)


    # Format edge labels to 3 decimal places
    edge_labels = nx.get_edge_attributes(G, 'weight')
    formatted_edge_labels = {k: f'{v:.3f}' for k, v in edge_labels.items()}
    nx.draw_networkx_edge_labels(G, pos, edge_labels=formatted_edge_labels)

    # Create a colorbar
    sm = ScalarMappable(norm=norm, cmap=cmap)
    sm.set_array(neuron_importances)
    cbar = plt.colorbar(sm, ax=plt.gca(), orientation='vertical')
    cbar.set_label('Neuron Importance')

    plt.show()
